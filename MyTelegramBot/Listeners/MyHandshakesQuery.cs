using MyTelegramBot.Types;

namespace MyTelegramBot.Listeners;

public class MyHandshakesQuery : Query, IListener
{
    public MyHandshakesQuery(Bot bot) : base(bot)
    {
        Names = new[] { "/myHandshakes" };
        MessageToSend = new string[]{"ü§ù –ú–æ–∏ —Ä—É–∫–æ–ø–æ–∂–∞—Ç–∏—è"
        };
    }
    protected override string Run(Context context, CancellationToken cancellationToken, out Dictionary<string, string> buttons)
    {
        buttons = new Dictionary<string, string>()
        {
            {"üîç –í—Å–µ —Ä—É–∫–æ–ø–æ–∂–∞—Ç–∏—è", "/allHandshakes"},
            {"1-–π —É—Ä–æ–≤–µ–Ω—å", "/firstLevelHandshakes"},
            {"–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", "/handshakeStats"},
        };
        return MessageToSend[0];
    }
}

public class AllHandshakesQuery : Query, IListener
{
    public AllHandshakesQuery(Bot bot) : base(bot)
    {
        Names = new[] { "/allHandshakes" };
        // MessageToSend = "üîç –í—Å–µ —Ä—É–∫–æ–ø–æ–∂–∞—Ç–∏—è: \n";
    }

    protected override string Run(Context context, CancellationToken cancellationToken)
    {
        var MessageToSend = "üïπ –£—Ä–æ–≤–µ–Ω—å | –†—É–∫–æ–ø–æ–∂–∞—Ç–∏–π | VIP\n";
        Dictionary<int, int> handshakes = new Dictionary<int, int>();
        // –∏—Ç–µ—Ä–∞—Ç–∏–≤–Ω—ã–π –ª–∏—Å—Ç–∏–Ω–≥ –¥–µ—Ä–µ–≤–∞
        Queue<string> queue = new Queue<string>();
        HashSet<string> visited = new HashSet<string>();
        
        var user = Database.GetUser(
            context.Update.CallbackQuery.From.Id
        );
        int depth = 0;
        int width = 1;
        int nextWidth = 0;
        handshakes.Add(depth, user.Children.Count);
        queue.Enqueue(user.UserName);
        while (queue.Count > 0)
        {
            var node = queue.Dequeue();
            visited.Add(node);
            var nodeUser = Database.GetUser(node);
            var nodesChildren = Database.GetUser(node).Children;
            nextWidth += nodesChildren.Count;
            foreach (var child in nodesChildren)
            {
                if (!visited.Contains(child))
                {
                    queue.Enqueue(child);
                    visited.Add(child);
                }
            }
            width -= 1;
            if (width == 0)
            {
                depth += 1;
                width = nextWidth;
                nextWidth = 0;
                handshakes.Add(depth, nextWidth);
                MessageToSend += depth + " | " + width + " | " + 0 + "\n"; //TODO: not null but vips
            }
            if (depth > 10) queue.Clear();
        }

        MessageToSend += $"üèÜ –í—Å–µ–≥–æ –Ω–∞ {depth} —É—Ä–æ–≤–Ω—è—Ö —Ä—É–∫–æ–ø–æ–∂–∞—Ç–∏–π:\n"+
                         $"{visited.Count} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π\n"+
                         $"{0} VIP";
        
        return MessageToSend;
    }
}

public class FirstLevelHandshakesQuery : Query, IListener
{
    public FirstLevelHandshakesQuery(Bot bot) : base(bot)
    {
        Names = new[] { "/firstLevelHandshakes" };
    }
    protected override string Run(Context context, CancellationToken cancellationToken)
    {
        var MessageToSend = "üßë‚Äçüíª –ù–∏–∫ | –í—Å–µ–≥–æ –†—É–∫–æ–ø–æ–∂–∞—Ç–∏–π | VIP";
        var user = Database.GetUser(
            context.Update.CallbackQuery.From.Id
        );
        var children = user.Children;
        foreach (var variableChild in children)
            MessageToSend += $"@{variableChild} | allHandshakesOfNik | Vips\n";
        return MessageToSend;
    }
}

