using MyTelegramBot.Types;

namespace MyTelegramBot.Listeners;

public class MyHandshakesQuery : Query, IListener
{
    public MyHandshakesQuery(Bot bot) : base(bot)
    {
        Names = new[] { "/myHandshakes" };
        MessageToSend = "ü§ù –ú–æ–∏ —Ä—É–∫–æ–ø–æ–∂–∞—Ç–∏—è";
        Buttons = new Dictionary<string, string>()
        {
            {"üîç –í—Å–µ —Ä—É–∫–æ–ø–æ–∂–∞—Ç–∏—è", "/allHandshakes"},
            {"1-–π —É—Ä–æ–≤–µ–Ω—å", "/firstLevelHandshakes"},
            {"–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", "/handshakeStats"},
        };
    }
}

public class AllHandshakesQuery : Query, IListener
{
    public AllHandshakesQuery(Bot bot) : base(bot)
    {
        Names = new[] { "/allHandshakes" };
        MessageToSend = "üîç –í—Å–µ —Ä—É–∫–æ–ø–æ–∂–∞—Ç–∏—è: \n";
    }

    protected override string Run(Context context, CancellationToken cancellationToken)
    {
        var user = Database.GetUser(
            context.Update.CallbackQuery.From.Id
            );
        // TODO: —Ä–µ–∫—É—Ä–µ–Ω—Ç–Ω—ã–π –ø–æ–∏—Å–∫ –ø–æ –¥–µ—Ä–µ–≤—É
        return base.Run(context, cancellationToken);
    }
}
public class FirstLevelHandshakesQuery : Query, IListener
{
    public FirstLevelHandshakesQuery(Bot bot) : base(bot)
    {
        Names = new[] { "/firstLevelHandshakes" };
        MessageToSend = "–†—É–∫–æ–ø–æ–∂–∞—Ç–∏—è –ø–µ—Ä–≤–æ–≥–æ —É—Ä–æ–≤–Ω—è: \n";
    }

    protected override string Run(Context context, CancellationToken cancellationToken)
    {
        var user = Database.GetUser(
            context.Update.CallbackQuery.From.Id
        );
        var children = user.Children;
        foreach (var variableChild in children)
        {
            MessageToSend += variableChild + "\n";
        }
        
        return base.Run(context, cancellationToken);
    }
}