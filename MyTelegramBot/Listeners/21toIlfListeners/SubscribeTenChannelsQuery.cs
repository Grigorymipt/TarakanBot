using System.Threading.Channels;
using MyTelegramBot.Types;
using Telegram.Bot;
using Telegram.Bot.Types.ReplyMarkups;
using TL;
using Channel = MongoDatabase.ModelTG.Channel;
using Message = Telegram.Bot.Types.Message;
using User = MongoDatabase.ModelTG.User;
using Serilog;

namespace MyTelegramBot.Listeners;

public class SubscribeTenChannelsQuery : Query, IListener
{
    protected MongoDatabase.ModelTG.Channel ChannelName(long userId)
    {
        //FIFO logics
        var channel = Database.FindChannelToListAsync(userId).Result.First();
        var user = Database.GetUser(userId);
        user.Subscribes ??= new List<MongoDatabase.ModelTG.Channel>();
        if (user.SubscribesVip.Contains(channel) == false) 
        { 
            channel.dateTime = DateTime.Now;
            channel.Update();
            user.Subscribes.Add(channel);
            user.Update();
            return channel;
        }
        else 
        {
            throw new Exception("ChannelsEnded");
        }
    }


    public SubscribeTenChannelsQuery(Bot bot) : base(bot)
    {
        MessageToSend = new string[]{ 
            "ShowChannel", 
            "–í—ã —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ —Ä–∞–∑ –Ω–∞–∂–∞–ª–∏ –∫–Ω–æ–ø–∫—É –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å. –ü–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –∫–∞–∫ –º–∏–Ω–∏–º—É–º –Ω–∞ –¥–µ—Å—è—Ç—å –∫–∞–Ω–∞–ª–æ–≤, –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤—ã—à–µ."
            };
        Names = new[] { "/subscribeTenChannels" };
        //Links = ...
        
    }

    protected override string Run(Context context, CancellationToken cancellationToken, out Dictionary<string, string> Buttons)
    {
        Buttons = new Dictionary<string, string>()
        {
            { "üü¢ –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è", "/subscribeListedChannel" }, // MakeLink
            { "üî¥ –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", "/skipListedChannel" },
            { "üî¥ Black List üî¥", "/blockListedChannel " },
            { "–ü–æ–¥–ø–∏—Å–∞–ª—Å—è –Ω–∞ 10 –∫–∞–Ω–∞–ª–æ–≤", "/iSubscribed" }
        };
        User user = Database.GetUser(context.Update.CallbackQuery.From.Id);
        if (user?.Subscribes?.Count > 5) //TODO: 20 in prod
        {
            Buttons.Clear(); //FIXME
            return MessageToSend[1];   
        }
        return MessageToSend[0];
        // if (ChannelName == null) MessageToSend = "–í #Userhub –º–µ–Ω—å—à–µ 20 –∫–∞–Ω–∞–ª–æ–≤, –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã–µ –≤—ã—à–µ";
    }

    public override async Task Handler(Context context, CancellationToken cancellationToken)
    {
        var buttons = new Dictionary<string, string>(){};
        string response = Run(context, cancellationToken, out buttons);
        Log.Information("run response received");
        Int64 chatId = context.Update.CallbackQuery.Message.Chat.Id;
        List<IEnumerable<InlineKeyboardButton>> categoryList = new List<IEnumerable<InlineKeyboardButton>>();
        Channel channeltosubs;
        try 
        {
            channeltosubs = ChannelName(context.Update.CallbackQuery.From.Id);
        }
        catch(Exception ex)
        {
            if(ex.Message == "ChannelsEnded") channeltosubs = new Channel();
        }
        channeltosubs = new Channel();
        response = response == MessageToSend[0] ? (channeltosubs.Title + channeltosubs.Describtion) : response;
        Log.Information("handling buttons");
 
        foreach (var category in buttons)
        {
            InlineKeyboardButton reply;
            
            if (category.Value == "/subscribeListedChannel" && channeltosubs != null)
            { 
                try
                {
                    // Console.WriteLine("");
                    reply = InlineKeyboardButton
                        .WithUrl(category.Key, "https://t.me/" + channeltosubs.Title);
                }
                catch(Exception ex)
                {
                    throw ex;
                }
            }
            else
            {
                 reply = InlineKeyboardButton
                    .WithCallbackData(category.Key, category.Value);
            }

            IEnumerable<InlineKeyboardButton> inlineKeyboardButton = new[] { reply };
            categoryList.Add(inlineKeyboardButton);
        }
        Log.Information("start sending");
        IEnumerable<IEnumerable<InlineKeyboardButton>> enumerableList1 = categoryList;
        InlineKeyboardMarkup inlineKeyboardMarkup = new InlineKeyboardMarkup(enumerableList1);

        Message sentMessage = await context.BotClient.SendTextMessageAsync(
            chatId: chatId,
            text: response,
            parseMode: Config.ParseMode,
            replyMarkup: inlineKeyboardMarkup
        );
    }
}

public class SkipTenChannelsQuery : SubscribeTenChannelsQuery
{
    public SkipTenChannelsQuery(Bot bot) : base(bot)
    {
        Names = new []{"/skipListedChannel"};
    }
    protected override string Run(Context context, CancellationToken cancellationToken)
    {
        // User user = Database.GetUser(context.Update.CallbackQuery.From.Id);
        // if(user.Subscribes == null) user.Subscribes = new List<MongoDatabase.ModelTG.Channel>();
        // user.Subscribes.Add(Database.GetChannel(ChannelName(context.Update.CallbackQuery.From.Id)));
        // user.Update();
        return base.Run(context, cancellationToken);
    }
}

public class BlockTenChannelsQuery : SubscribeTenChannelsQuery
{
    public BlockTenChannelsQuery(Bot bot) : base(bot)
    {
        Names = new []{"/blockListedChannel"};
        MessageToSend = new string[] {
            "ShowChannel",
            "ü§Ø –ë–ª–∞–≥–æ–¥–∞—Ä–∏–º! üßê –ù–∞—à–∞ –ø–æ–ª–∏—Ü–∏—è –Ω—Ä–∞–≤–æ–≤ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ —Ä–∞–∑–±–µ—Ä–µ—Ç—Å—è —Å —ç—Ç–∏–º! \n\n" + "ShowChannel", 
            "ü§Ø –ë–ª–∞–≥–æ–¥–∞—Ä–∏–º! üßê –ù–∞—à–∞ –ø–æ–ª–∏—Ü–∏—è –Ω—Ä–∞–≤–æ–≤ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ —Ä–∞–∑–±–µ—Ä–µ—Ç—Å—è —Å —ç—Ç–∏–º! \n\n" +
                           "–í—ã —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ —Ä–∞–∑ –Ω–∞–∂–∞–ª–∏ –∫–Ω–æ–ø–∫—É –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å. –ü–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –∫–∞–∫ –º–∏–Ω–∏–º—É–º –Ω–∞ –¥–µ—Å—è—Ç—å" +
                            " –∫–∞–Ω–∞–ª–æ–≤, –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤—ã—à–µ."};
    }

    protected override string Run(Context context, CancellationToken cancellationToken, out Dictionary<string, string> Buttons)
    {
        Send.Photo(context, Environment.GetEnvironmentVariable("pathToMaterials") + "goodbuy.jpeg", cancellationToken);
        base.Run(context, cancellationToken, out Buttons);
        var channel = Database.GetChannel(context.Update.CallbackQuery.Message);
        if (channel != null)
        {
            channel.Reports += 1;
            channel.Update();
        }
        User user = Database.GetUser(context.Update.CallbackQuery.From.Id);
        if (user.Subscribes?.Count > 5) //TODO: 20 in prod
        {
            Buttons.Clear(); //FIXME
            return MessageToSend[2];
        }
        return MessageToSend[1];
    }
}

class CheckSubscriptions : SubscribeTenChannelsQuery, IListener
{
    private bool UserSubscribed = false;

    public CheckSubscriptions(Bot bot) : base(bot)
    {
        Names = new[] { "/iSubscribed" };
        MessageToSend = base.MessageToSend
        .Append("–≤—ã –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ n, –∫–∞–Ω–∞–ª–æ–≤, –Ω–µ –Ω–∞–¥–æ —Ç–∞–∫(")
        .Append("üéØ –û—Ç–ª–∏—á–Ω–æ, —Ç–µ–ø–µ—Ä—å –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ 10 –∫–∞–Ω–∞–ª–æ–≤ VIP –±–ª–æ–≥–≥–µ—Ä–æ–≤. –ü—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –Ω–∞ " +
                                "–∫–Ω–æ–ø–∫—É –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å –∫–∞–Ω–∞–ª –±—É–¥–µ—Ç –∑–∞–º–µ–Ω–µ–Ω –Ω–∞ –¥—Ä—É–≥–æ–π, –∏—Å—Ö–æ–¥—è –∏–∑ —É–∫–∞–∑–∞–Ω–Ω—ã—Ö –∏–Ω—Ç–µ—Ä–µ—Å–æ–≤. " +
                                "–ù–∞–∂–∞—Ç—å '–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å' –º–æ–∂–Ω–æ –Ω–µ –±–æ–ª–µ–µ 20 —Ä–∞–∑. üö®üöî –ï—Å–ª–∏ –∫–∞–Ω–∞–ª –Ω–∞—Ä—É—à–∞–µ—Ç –ø—Ä–∞–≤–∏–ª–∞ –ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è " +
                                "#UserHub, —Ç–æ –∂–º–∏ ¬´–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å¬ª –∞ –∑–∞—Ç–µ–º ¬´Black List¬ª –∏ –Ω–∞—à–∏ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç—ã —Ä–∞–∑–±–µ—Ä—É—Ç—Å—è —Å —ç—Ç–∏–º.").ToArray();
    
    }

    protected override string Run(Context context, CancellationToken cancellationToken, out Dictionary<string, string> Buttons)
    {
        Buttons = new Dictionary<string, string>();
        var userId = context.Update.CallbackQuery.From.Id;
        int totalAmount = 0;
        User user = Database.GetUser(userId);
        foreach (var channel in 
            user.Subscribes ??= new List<MongoDatabase.ModelTG.Channel>())
        {
            Log.Information("userSubscribed:");
            var userSubscribed = context.BotClient.MemberStatusChat(channelName: channel.Title, userId).Result;
            Log.Information(userSubscribed);
            if (userSubscribed == "MemMemberber") UserSubscribed = true;
            if (UserSubscribed)
                totalAmount += 1;
        }
        if (totalAmount < 1) // TODO: prod - 10
        {
            return "–≤—ã –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ 1 –∫–∞–Ω–∞–ª–æ–≤, –Ω–µ –Ω–∞–¥–æ —Ç–∞–∫(";
        }
        else
        {
            Buttons.Clear();
            Buttons.Add("–ü—Ä–∏–Ω—è—Ç–æ!", "/clear66step"); //TODO: PROD: subscribeTenVIPChannels
            return MessageToSend.Last();
                
        }
    }
    // public override async Task Handler(Context context, Dictionary<string, string> buttonsList, CancellationToken cancellationToken)
    // {
    //     base.Handler(context, buttonsList, cancellationToken);
    // }
}
