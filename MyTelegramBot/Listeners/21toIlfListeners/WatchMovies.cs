using MyTelegramBot.Types;
using Telegram.Bot;
using Telegram.Bot.Types;
using File = System.IO.File;
using InlineQuery = Telegram.Bot.Types.InlineQuery;

namespace MyTelegramBot.Listeners._21toIlfListeners;

public class WatchMovies : Command, IListener // TODO: Query, IListener
{
    public WatchMovies(Bot bot) : base(bot)
    {
        Names = new[] { "/watchmovies", "/watchMovies" };
        MessageToSend = "üòâ –û—Ç–ª–∏—á–Ω–æ, —Ç–æ–≥–¥–∞ –ª–æ–≤–∏ –∫–æ—Ä–æ—Ç–∫–æ–µ –≤–∏–¥–µ–æ –æ–±–æ –º–Ω–µ. –°–º–æ—Ç—Ä–∏ –≤–Ω–∏–º–∞—Ç–µ–ª—å–Ω–æ, –≤ –≤–∏–¥–µ–æ —Å–ø—Ä—è—Ç–∞–Ω–æ –∫–æ–¥–æ–≤–æ–µ" +
                        " —Å–ª–æ–≤–æ! –ù—É–∂–Ω–æ –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –µ–≥–æ –º–Ω–µ, —á—Ç–æ–±—ã –ø–µ—Ä–µ–π—Ç–∏ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —à–∞–≥—É.";
        Buttons = new Dictionary<string, string>( ){ { "–ü–æ—Å–º–æ—Ç—Ä–µ–ª, –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–æ–¥–æ–≤–æ–µ —Å–ª–æ–≤–æ", "/sendKeyWord" } };
    }

    // public override async Task Handler(Context context, CancellationToken cancellationToken)
    // {
    //     MessageToSend += "\n https://www.youtube.com/watch?v=A0_Abt4dzAA";
    //     await base.Handler(context, cancellationToken);
    //     // Int64 chatId = context.Update.Message.Chat.Id;
    //     // var url = new Uri();
    //     // InputFile video = new InputFileStream();
    //     // await context.BotClient.SendVideoAsync(
    //     //     chatId: chatId,
    //     //     video: video
    //     // );
    // }
    protected override string Run(Context context, CancellationToken cancellationToken)
    {
        MessageToSend += "https://www.youtube.com/watch?v=A0_Abt4dzAA";
        return base.Run(context, cancellationToken);
    }
}

public class SendKeyWord : Types.InlineQuery, IListener
{
    public SendKeyWord(Bot bot) : base(bot)
    {
        Names = new[] { "/sendKeyWord" };
        MessageToSend = "–ö–æ–¥–æ–≤–æ–µ —Å–ª–æ–≤–æ –∏–∑ –≤–∏–¥–µ–æ:";
        MessageLabel = "KeyWord";
    }
}

public class GetKeyWord : Types.InlineReply, IListener
{
    public GetKeyWord(Bot bot) : base(bot)
    {
        MessageLabel = "KeyWord";
        Buttons = new Dictionary<string, string>();
    }

    protected override string Run(Context context, CancellationToken cancellationToken)
    {
        if (context.Update.Message.Text.Equals("–ú–∏–ª–ª–∏–æ–Ω") || context.Update.Message.Text.Equals("–º–∏–ª–ª–∏–æ–Ω"))
        {
            MessageToSend = "ü•≥ –ü—Ä–∞–≤–∏–ª—å–Ω–æ! –¢—ã –ø–æ—á—Ç–∏ —É —Ü–µ–ª–∏. –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ –ª–æ–≤–∏ PDF –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—é! –ó–¥–µ—Å—å —Ç—ã –Ω–∞–π–¥–µ—à—å" +
                            " –æ—Ç–≤–µ—Ç—ã –Ω–∞ –≤—Å–µ –≤–æ–ø—Ä–æ—Å—ã. –ñ–º–∏ –Ω–∞ '–ø—Ä–æ–π—Ç–∏ —Ç–µ—Å—Ç' üëá";
            Buttons.Clear();
            Buttons.Add("üí° –ü—Ä–æ–π—Ç–∏ —Ç–µ—Å—Ç.", "/startTest");
        }
        else
        {
            var user = Database.GetUser(context.Update.Message.From.Id);
            user.Attempts += 1;
            user.Update();
            if (user.Attempts < 2)
            {
                MessageToSend = "üòé –°–æ–±–µ—Ä–∏—Å—å, –≤—Å–µ–≥–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ —à–∞–≥–æ–≤ –æ—Ç–¥–µ–ª—è–µ—Ç —Ç–µ–±—è –æ—Ç –ø–µ—Ä–≤–æ–≥–æ 1.000.000 –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤. " +
                                "–ï—â–µ —Ä–∞–∑ –ø–æ—Å–º–æ—Ç—Ä–∏ –≤–Ω–∏–º–∞—Ç–µ–ª—å–Ω–æ –≤–∏–¥–µ–æ! (–ø–æ–¥—Å–∫–∞–∑–∫–∞, —Å 00:00 —Å–µ–∫ –¥–æ 00:00 —Å–µ–∫)";
                Buttons.Clear();
                Buttons.Add("–ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –µ—â–µ —Ä–∞–∑", "/sendKeyWord");
            }
            else
            {
                MessageToSend = "üò≥ –í–æ–∑–º–æ–∂–Ω–æ, –∫–Ω–∏–≥–∏ —Ç—ã –ª—é–±–∏—à—å –±–æ–ª—å—à–µ! –¢–æ–≥–¥–∞ –ª–æ–≤–∏ PDF –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—é. –¢–æ–ª—å–∫–æ, —á–∏—Ç–∞–π" +
                                " –≤–Ω–∏–º–∞—Ç–µ–ª—å–Ω–æ, –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –±—É–¥–µ—Ç –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –ø–∞—Ä—É –≤–æ–ø—Ä–æ—Å–æ–≤.";
                Buttons.Clear();
                Buttons.Add("üí° –ü—Ä–æ–π—Ç–∏ —Ç–µ—Å—Ç.", "/startTest");
                ChatId chatId = context.Update.Message.Chat.Id;
                Send.Document(context, Environment.GetEnvironmentVariable("pathToMaterials")+"conspect.pdf", cancellationToken);
            }
        }
        return base.Run(context, cancellationToken);
    }
}