using MyTelegramBot.Types;
using Telegram.Bot;
using Telegram.Bot.Types.Enums;
using TL;
using LabeledPrice = Telegram.Bot.Types.Payments.LabeledPrice;

namespace MyTelegramBot.Listeners;

public class MoreAboutVIP : Query, IListener
{
    public MoreAboutVIP(Bot bot) : base(bot)
    {
        Names = new[] { "/moreAboutVIP" };
        MessageToSend = new[] {
                        "üéØ –î–ª—è —á–µ–≥–æ —Ç–µ–±–µ —Å—Ç–∞—Ç—É—Å VIP: \n" +
                        "1. –ù–µ–∑–∞–≤–∏—Å–∏–º–æ –æ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–Ω—ã—Ö –≤ #UserHub –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, —Ç—ã –±—É–¥–µ—à—å –ø–æ–ª—É—á–∞—Ç—å –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤, " +
                        "—Ç–∞–∫ –∫–∞–∫ –∫–∞–Ω–∞–ª –±—É–¥–µ—Ç –Ω–∞—Ö–æ–¥–∏—Ç—å—Å—è –Ω–∞ –≤–µ—Ä—Ö–Ω–∏—Ö –ø–æ–∑–∏—Ü–∏—è—Ö –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∫–∞—Ç–∞–ª–æ–≥–∞ #UserHub, –∞ —Ç–∞–∫–∂–µ –≤" +
                        " –≤—ã–¥–∞—á–µ —Å—Ä–µ–¥–∏ –¥—Ä—É–≥–æ–π 10-–∫–∏ VIP-–∫–∞–Ω–∞–ª–æ–≤, –Ω–∞ –∫–æ—Ç–æ—Ä—ã–µ –ø–æ–¥–ø–∏—Å—ã–≤–∞—é—Ç—Å—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏. \n" +
                        "2. –ü–æ–¥–ø–∏—Å—á–∏–∫–∏ –±—É–¥—É—Ç –±–æ–ª–µ–µ —Ü–µ–ª–µ–≤—ã–º–∏, —Ç–∞–∫ –∫–∞–∫ –º—ã –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –∫–∞–∫–∏–µ —Ç–µ–º—ã –∏–º –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã. \n " +
                        "3. –ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –≤ –±–æ—Ç–µ ... –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –∞ —Ç–∞–∫–∂–µ ... –∫–∞–Ω–∞–ª–æ–≤, –∏–∑ –∫–æ—Ç–æ—Ä—ã—Ö ... –≤ —Å—Ç–∞—Ç—É—Å–µ VIP. " +
                        "–í —Å—Ä–µ–¥–Ω–µ–º –∫–∞–∂–¥—ã–π VIP –ø–æ–ª—É—á–∏–ª –ø–æ ... —Ü–µ–ª–µ–≤—ã—Ö –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤. \n " +
                        "4. –î–æ—Å—Ç—É–ø –≤ –∑–∞–∫—Ä—ã—Ç—ã–π VIP-—á–∞—Ç, –≥–¥–µ –º–æ–∂–Ω–æ –æ–±–º–µ–Ω–∏–≤–∞—Ç—å—Å—è –æ–ø—ã—Ç–æ–º –ø–æ —Ä–∞—Å–∫—Ä—É—Ç–∫–µ –∏ –º–æ–Ω–µ—Ç–∏–∑–∞—Ü–∏–∏ —Å–≤–æ–µ–≥–æ –∫–∞–Ω–∞–ª–∞.\n" +
                        "5. –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –ø–æ–ª—É—á–∞—Ç—å –¥–æ—Ö–æ–¥ –∑–∞ —Å—á–µ—Ç –ø—Ä–æ–≥—Ä–∞–º–º—ã #10—Ä—É–∫–æ–ø–æ–∂–∞—Ç–∏–π #UserHub ‚Äî –ø–æ 5% —Å –∫–∞–∂–¥–æ–π –æ–ø–ª–∞—Ç—ã " +
                        "–µ–∂–µ–º–µ—Å—è—á–Ω–æ–π –∏ –≥–æ–¥–æ–≤–æ–π –ø–æ–¥–ø–∏—Å–∫–∏ –æ—Ç –≤—Å–µ—Ö VIP-–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –Ω–∞ 10-–∏ —É—Ä–æ–≤–Ω—è—Ö —Ä—É–∫–æ–ø–æ–∂–∞—Ç–∏–π, –∞ —Ç–∞–∫–∂–µ –ø–ª–∞—Ç–Ω–æ–≥–æ " +
                        "–ª–∏—Å—Ç–∏–Ω–≥–∞ –∏ –≤—Å–µ—Ö –¥—Ä—É–≥–∏—Ö –¥–æ—Ö–æ–¥–æ–≤ #UserHub."
        };
    }
    protected override string Run(Context context, CancellationToken cancellationToken, out Dictionary<string, string> buttons)
    {
        buttons = new Dictionary<string, string>()
        {
            {"–ü—Ä–∏–æ–±—Ä–µ—Å—Ç–∏ VIP üèÜ –ø–æ–∑–∂–µ", "/buyVIPLater"},
            {"–ü—Ä–∏–æ–±—Ä–µ—Å—Ç–∏ —Å—Ç–∞—Ç—É—Å VIP üèÜ", "/buyVIPNow"}
        };
        return MessageToSend[0];
    }

    protected override string Run(Context context, CancellationToken cancellationToken)
    {
        Send.Photo(context, Environment.GetEnvironmentVariable("pathToMaterials") + "cat.jpg", cancellationToken);
        return base.Run(context, cancellationToken);
    }
}

public class BuyVIPLater : Query, IListener
{
    public BuyVIPLater(Bot bot) : base(bot)
    {
        Names = new[] { "/buyVIPLater" };
        MessageToSend = new[] {"–ß—Ç–æ-—Ç–æ —è –Ω–µ –Ω–∞—à–µ–ª —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —Ç–∞–∫–æ–≥–æ —Å–ª—É—á–∞—è..."};
    }

    protected override string Run(Context context, CancellationToken cancellationToken)
    {
        //TODO: mb some logic to remind every N days/weeks?
        return base.Run(context, cancellationToken);
    }
}

public class BuyVIPNow : Query, IListener
{
    IEnumerable<LabeledPrice> prices;
    public BuyVIPNow(Bot bot) : base(bot)
    {
        Names = new[] { "/buyVIPNow" };
        MessageToSend = new[] {"–¢—É—Ç –°–µ—Ä–≥–µ–π –ø–æ–¥–∫–∞—Ç—ã–≤–∞–µ—Ç –ø–ª–∞—Ç–µ–∂–∫—É —Å –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ–º @wallet. –° –º–µ–Ω—è –∫–Ω–æ–ø–æ—á–∫–∞ —Ç–æ–≤–∞—Ä–∞."};
        prices = new[]
        {
            new LabeledPrice("vipLabel", 10000)
        };
    }

    public override async Task Handler(Context context, CancellationToken cancellationToken)
    {
        var invoiceAsync = await context.BotClient.SendInvoiceAsync(
            chatId: context.Update.CallbackQuery.Message.Chat.Id,
            title: "üèÜ VIP —Å—Ç–∞—Ç—É—Å –Ω–∞ –º–µ—Å—è—Ü",
            description: "–í–∏–ø —Å—Ç–∞—Ç—É—Å –Ω–∞ –º–µ—Å—è—Ü",
            payload: "VipMonthlyPayload",
            providerToken: Environment.GetEnvironmentVariable("providerToken"),
            currency: "RUB",
            prices: prices,
            cancellationToken: cancellationToken
            );
        
        // return base.Handler(context, cancellationToken);
    }
}

public class ConfirmVipPayment : Listener, IListener // TODO: make abstract listener for payments
{
    public ConfirmVipPayment(Bot bot) : base(bot)
    {
        
    }

    public override async Task Handler(Context context, CancellationToken cancellationToken)
    {
        var preCheckoutQueryId = context.Update.PreCheckoutQuery.Id;
        context.BotClient.AnswerPreCheckoutQueryAsync(
            preCheckoutQueryId: preCheckoutQueryId,
            cancellationToken: cancellationToken
        );
        //Todo: add node to DB
    }

    public override async Task<bool> Validate(Context context, CancellationToken cancellationToken)
    {
        if (context.Update.Type != UpdateType.PreCheckoutQuery) return false;
        if (context.Update.PreCheckoutQuery.InvoicePayload == "VipMonthlyPayload") return true;
        return false;
    }
}
