using MongoDatabase.ModelTG;
using MyTelegramBot.Types;
using Telegram.Bot.Types.Enums;

namespace MyTelegramBot.Listeners;

public class AlmostOnTargetQuery : Command//TODO: must be query from previous step
{
    public AlmostOnTargetQuery(Bot bot) : base(bot)
    {
        Names = new[] { "/almostOnTarget" };
        Buttons = new Dictionary<string, string>()
        {
            {"ü§ù –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –ø—Ä–∏–Ω—è—Ç–æ", "/suggestionAccepted"},
            {"üí≥ –ü–ª–∞—á—É –∑–∞ –ª–∏—Å—Ç–∏–Ω–≥", "/payForListing"}
        };
        MessageToSend = "üéØ –ú—ã –ø–æ—á—Ç–∏ —É —Ü–µ–ª–∏. –û—Å—Ç–∞–ª—Å—è –ø–æ—Å–ª–µ–¥–Ω–∏–π —à–∞–≥!ü§´ –£ –º–µ–Ω—è –∫ —Ç–µ–±–µ –¥–µ–ª–æ–≤–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ. " +
                        "–ü—Ä–µ–¥–ª–∞–≥–∞—é –æ–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å –≤ —Ç–≤–æ–µ–º –∫–∞–Ω–∞–ª–µ —Ä–µ–ø–æ—Å—Ç –æ–¥–Ω–æ–≥–æ –∏–∑ –º–æ–∏—Ö –ø–æ—Å—Ç–æ–≤, –≥–¥–µ —è —Ä–µ–∫–æ–º–µ–Ω–¥—É—é " +
                        "–ª—é–¥—è–º –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –∫–∞—Ç–∞–ª–æ–≥–æ–º #UserHub, –∞ –≤–∑–∞–º–µ–Ω —è —Ä–∞–∑–º–µ—â—É —Ç–≤–æ–π –∫–∞–Ω–∞–ª –≤ –∫–∞—Ç–∞–ª–æ–≥–µ –∞–±—Å–æ–ª—é—Ç–Ω–æ" +
                        " –±–µ—Å–ø–ª–∞—Ç–Ω–æ –∏ –Ω–∞–≤—Å–µ–≥–¥–∞. –ï—Å–ª–∏ –∂–µ —ç—Ç–æ—Ç –≤–∞—Ä–∏–∞–Ω—Ç –Ω–µ –ø–æ–¥—Ö–æ–¥–∏—Ç, —Ç–æ —Ç—ã –º–æ–∂–µ—à—å –ø—Ä–∏–æ–±—Ä–µ—Å—Ç–∏ –ø–æ–∂–∏–∑–Ω–µ–Ω–Ω—ã–π " +
                        "–ª–∏—Å—Ç–∏–Ω–≥ –≤ –∫–∞—Ç–∞–ª–æ–≥–µ –≤—Å–µ–≥–æ –∑–∞ 100$";
    }

    
    public override string Run(Context context, CancellationToken cancellationToken)
    {
        Console.WriteLine(context.Update.Message.From.Id);
        var user = GetUserSync(context.Update.Message.From.Id);
        Console.WriteLine(context.Update.Message.Text);
        string newChannel = context.Update.Message.Text;
        var newUser = user;
        newUser.Channels.Add(newChannel); // FIXME: very strange behavior
        newUser.LastMessage = null;
        newUser.Update();
        return MessageToSend;
    }

    public override async Task<bool> Validate(Context context, CancellationToken cancellationToken)
    {
        if (context.Update.Type != UpdateType.Message)
            return false;
        var user = GetUserSync(context.Update.Message.From.Id);
        if (user == null) return false;
        if (user.RefId == null)
            return false;
        if (user.LastMessage == "GetAddressInline")
            return true;
        return false;
    }
}