using MongoDatabase.ModelTG;
using MyTelegramBot.Types;
using Telegram.Bot.Types.Enums;

namespace MyTelegramBot.Listeners;

public class AlmostOnTargetQuery : InlineReply, IListener 
{
    public AlmostOnTargetQuery(Bot bot) : base(bot)
    {
        MessageToSend = new[] {"üéØ –ú—ã –ø–æ—á—Ç–∏ —É —Ü–µ–ª–∏. –û—Å—Ç–∞–ª—Å—è –ø–æ—Å–ª–µ–¥–Ω–∏–π —à–∞–≥!ü§´ –£ –º–µ–Ω—è –∫ —Ç–µ–±–µ –¥–µ–ª–æ–≤–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ. " +
                        "–ü—Ä–µ–¥–ª–∞–≥–∞—é –æ–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å –≤ —Ç–≤–æ–µ–º –∫–∞–Ω–∞–ª–µ —Ä–µ–ø–æ—Å—Ç –æ–¥–Ω–æ–≥–æ –∏–∑ –º–æ–∏—Ö –ø–æ—Å—Ç–æ–≤, –≥–¥–µ —è —Ä–µ–∫–æ–º–µ–Ω–¥—É—é " +
                        "–ª—é–¥—è–º –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –∫–∞—Ç–∞–ª–æ–≥–æ–º #UserHub, –∞ –≤–∑–∞–º–µ–Ω —è —Ä–∞–∑–º–µ—â—É —Ç–≤–æ–π –∫–∞–Ω–∞–ª –≤ –∫–∞—Ç–∞–ª–æ–≥–µ –∞–±—Å–æ–ª—é—Ç–Ω–æ" +
                        " –±–µ—Å–ø–ª–∞—Ç–Ω–æ –∏ –Ω–∞–≤—Å–µ–≥–¥–∞. –ï—Å–ª–∏ –∂–µ —ç—Ç–æ—Ç –≤–∞—Ä–∏–∞–Ω—Ç –Ω–µ –ø–æ–¥—Ö–æ–¥–∏—Ç, —Ç–æ —Ç—ã –º–æ–∂–µ—à—å –ø—Ä–∏–æ–±—Ä–µ—Å—Ç–∏ –ø–æ–∂–∏–∑–Ω–µ–Ω–Ω—ã–π " +
                        "–ª–∏—Å—Ç–∏–Ω–≥ –≤ –∫–∞—Ç–∞–ª–æ–≥–µ –≤—Å–µ–≥–æ –∑–∞ 100$"};
        MessageLabel = "GetAddressInline";
    }
    protected override string Run(Context context, CancellationToken cancellationToken, out Dictionary<string, string> Buttons)
    {
        Buttons = new Dictionary<string, string>()
        {
            {"ü§ù –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –ø—Ä–∏–Ω—è—Ç–æ", "/suggestionAccepted"},
            {"üí≥ –ü–ª–∞—á—É –∑–∞ –ª–∏—Å—Ç–∏–Ω–≥", "/buyListingNow"}
        };
        // Console.WriteLine(context.Update.Message.From.Id);
        var user = Database.GetUser(context.Update.Message.From.Id);
        // Console.WriteLine(context.Update.Message.Text);
        string newChannel = context.Update.Message.Text;
        if (newChannel.First() != '@')
        {
            Buttons.Clear();
            Buttons.Add("–í–≤–µ—Å—Ç–∏ –∏–º—è –∫–∞–Ω–∞–ª–∞ –∑–∞–Ω–æ–≤–æ","/saveCategory");
            return "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∏–º—è –∫–∞–Ω–∞–ª–∞!";
        }
        var newUser = user;
        newChannel = newChannel.Remove(0, 1);
        try
        {
            if (ChannelInfo.IsAdmin(newChannel, context.Update.Message.From.Id).Result) 
            {
                if(newUser.Channels == null || newUser.Channels.Contains(newChannel) == false)
                {
                    newUser.Channels ??= new List<string>();
                    newUser.Channels.Add(newChannel); // FIXME: very strange behavior
                    Channel channel = new Channel()
                    {
                        PersonID = user.Id,
                        Title = newChannel,
                    };
                    Database.CreateChannel(channel);
                }
                else
                {
                    return "–í—ã —É–∂–µ –¥–æ–±–∞–≤–ª—è–ª–∏ –¥–∞–Ω–Ω—ã–π –∫–∞–Ω–∞–ª";
                    Buttons.Clear();
                }
            }
            else
            {
                return "–í—ã –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å —Å–æ–∑–¥–∞—Ç–µ–ª–µ–º –¥–∞–Ω–Ω–æ–≥–æ –∫–∞–Ω–∞–ª–∞";
                Buttons.Clear();
            }
        }
        catch (Exception ex)
        {
            if (ex.Message == "Channel not Exists")
            {
                return "–¢–∞–∫–æ–≥–æ –∫–∞–Ω–∞–ª–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç";
                Buttons.Clear();
                Buttons.Add("–ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –µ—â–µ —Ä–∞–∑", "/saveCategory");
            }
        }
        newUser.LastMessage = null;
        newUser.Update();
        return MessageToSend[0];
    }
}